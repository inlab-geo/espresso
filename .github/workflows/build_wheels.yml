name: Build

on:
  workflow_dispatch:
  push:
    branches: main
    paths:
      - 'src/cofi_espresso/**'
      - 'pyproject.toml'
      - 'setup.py'
  pull_request:
    paths:
      - 'src/cofi_espresso/**'
      - 'pyproject.toml'
      - 'setup.py'

jobs:
  # build_wheels_windows:
  #   if: github.repository_owner == 'inlab-geo'
  #   name: Build wheels on Windows
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Install Cygwin
  #       uses: egor-tensin/setup-cygwin@v3
  #       with:
  #         platform: x64
  #         install-dir: 'C:\tools\cygwin'
  #         packages: >-
  #           python38-devel python38-zipp python38-importlib-metadata
  #           python38-cython python38-pip python38-wheel python38-cffi
  #           python38-pytz python38-setuptools python38-pytest
  #           python38-hypothesis liblapack-devel
  #           gcc-fortran gcc-g++ git dash
      
  #     - name: Set Windows PATH
  #       uses: egor-tensin/cleanup-path@v1
  #       with:
  #         dirs: 'C:\tools\cygwin\bin;C:\tools\cygwin\lib\lapack'
      
  #     - name: Verify that bash is Cygwin bash
  #       run: |
  #         command bash
  #         bash -c "uname -svrmo"
      
  #     - name: Update with Cygwin git
  #       # fetch-depth=0 above should make this short.
  #       run: |
  #         dash -c "which git; /usr/bin/git config --system --add safe.directory /cygdrive/d/a/inlab-geo/espresso"
  #         dash -c "which git; /usr/bin/git fetch --all -p"
      
  #     - name: Verify python version
  #       # Make sure it's the Cygwin one, not a Windows one
  #       run: |
  #         dash -c "which python3.8; /usr/bin/python3.8 --version -V"

  #     - name: Generate package source and install 
  #       run: |
  #         dash -c "python -m pip install -r envs/requirements_test.txt"
  #         dash -c "python tools/build_package/build.py"

  #     - name: Build wheels
  #       run: dash -c "python -m cibuildwheel --output-dir wheelhouse"
  #       working-directory: _esp_build
  #       env:
  #         CIBW_SKIP: pp* *-win32 *-manylinux_i686 *-musllinux_*
  #         # Package the DLL dependencies in the wheel for windows (done by default for the other platforms).
  #         # delvewheel cannot mangle the libraries, stripping does not work.
  #         CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
  #         CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel show {wheel} && delvewheel repair -w {dest_dir} {wheel} --no-mangle-all"
  #         # Run the tests.
  #         # CIBW_TEST_COMMAND: python -m pip install pytest; python ../tools/build_package/validate.py --post

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: _esp_build/wheelhouse/*.whl


  build_wheels_non_windows:
    if: github.repository_owner == 'inlab-geo'
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Symlink gfortran (macOS)
        if: runner.os == 'macOS'
        run: |
          # make sure gfortran is available
          # https://github.com/actions/virtual-environments/issues/2524
          # https://github.com/cbg-ethz/dce/blob/master/.github/workflows/pkgdown.yaml
          sudo ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@10/*/lib/gcc/10 /usr/local/gfortran/lib
          gfortran --version

      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3

      - name: Generate package source with contributions
        run: |
          python -m pip install -r envs/requirements_test.txt
          python tools/build_package/build.py

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        working-directory: _esp_build
        env:
          CIBW_SKIP: pp* *-win32 *-manylinux_i686 *-musllinux_*
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          # Run the tests.
          CIBW_TEST_COMMAND: >
            python -m pip install pytest &&
            python {project}/../tools/build_package/validate.py --post

      - uses: actions/upload-artifact@v3
        with:
          path: _esp_build/wheelhouse/*.whl
